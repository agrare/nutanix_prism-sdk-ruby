=begin
#Nutanix Prism APIs

#Manage Tasks, Category Associations and Submit Batch Operations.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module NutanixPrism
  class CategoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a category 
    # Creates a category with a given key and value pair. 
    # @param prism_v40_config_category [PrismV40ConfigCategory] 
    # @param [Hash] opts the optional parameters
    # @return [CreateCategory201Response]
    def create_category(prism_v40_config_category, opts = {})
      data, _status_code, _headers = create_category_with_http_info(prism_v40_config_category, opts)
      data
    end

    # Create a category 
    # Creates a category with a given key and value pair. 
    # @param prism_v40_config_category [PrismV40ConfigCategory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCategory201Response, Integer, Hash)>] CreateCategory201Response data, response status code and response headers
    def create_category_with_http_info(prism_v40_config_category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.create_category ...'
      end
      # verify the required parameter 'prism_v40_config_category' is set
      if @api_client.config.client_side_validation && prism_v40_config_category.nil?
        fail ArgumentError, "Missing the required parameter 'prism_v40_config_category' when calling CategoriesApi.create_category"
      end
      # resource path
      local_var_path = '/prism/v4.0/config/categories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prism_v40_config_category)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCategory201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"CategoriesApi.create_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#create_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a category 
    # Deletes a category with the given external identifier. 
    # @param ext_id [String] A globally unique identifier of an instance that is suitable for external consumption. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_category_by_id(ext_id, opts = {})
      delete_category_by_id_with_http_info(ext_id, opts)
      nil
    end

    # Delete a category 
    # Deletes a category with the given external identifier. 
    # @param ext_id [String] A globally unique identifier of an instance that is suitable for external consumption. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_category_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.delete_category_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling CategoriesApi.delete_category_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling CategoriesApi.delete_category_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/prism/v4.0/config/categories/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"CategoriesApi.delete_category_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#delete_category_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a category 
    # Fetches the details of a category with the given external identifier. 
    # @param ext_id [String] A globally unique identifier of an instance that is suitable for external consumption. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - associations - detailedAssociations 
    # @return [GetCategoryById200Response]
    def get_category_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_category_by_id_with_http_info(ext_id, opts)
      data
    end

    # Fetch a category 
    # Fetches the details of a category with the given external identifier. 
    # @param ext_id [String] A globally unique identifier of an instance that is suitable for external consumption. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - associations - detailedAssociations 
    # @return [Array<(GetCategoryById200Response, Integer, Hash)>] GetCategoryById200Response data, response status code and response headers
    def get_category_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.get_category_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling CategoriesApi.get_category_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling CategoriesApi.get_category_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/prism/v4.0/config/categories/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCategoryById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"CategoriesApi.get_category_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#get_category_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List categories 
    # Fetches a list of categories with pagination, filtering, sorting, selection, and optional expansion of associated entity counts. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId - key - ownerUuid - type - value 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - key - value 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - associations - detailedAssociations 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - description - extId - key - ownerUuid - type - value 
    # @return [ListCategories200Response]
    def list_categories(opts = {})
      data, _status_code, _headers = list_categories_with_http_info(opts)
      data
    end

    # List categories 
    # Fetches a list of categories with pagination, filtering, sorting, selection, and optional expansion of associated entity counts. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId - key - ownerUuid - type - value 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - key - value 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - associations - detailedAssociations 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - description - extId - key - ownerUuid - type - value 
    # @return [Array<(ListCategories200Response, Integer, Hash)>] ListCategories200Response data, response status code and response headers
    def list_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.list_categories ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CategoriesApi.list_categories, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CategoriesApi.list_categories, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CategoriesApi.list_categories, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/prism/v4.0/config/categories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCategories200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"CategoriesApi.list_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#list_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a category 
    # Updates the description, value, and owner properties of a category. 
    # @param ext_id [String] A globally unique identifier of an instance that is suitable for external consumption. 
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param prism_v40_config_category [PrismV40ConfigCategory] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateCategoryById200Response]
    def update_category_by_id(ext_id, if_match, prism_v40_config_category, opts = {})
      data, _status_code, _headers = update_category_by_id_with_http_info(ext_id, if_match, prism_v40_config_category, opts)
      data
    end

    # Update a category 
    # Updates the description, value, and owner properties of a category. 
    # @param ext_id [String] A globally unique identifier of an instance that is suitable for external consumption. 
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param prism_v40_config_category [PrismV40ConfigCategory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateCategoryById200Response, Integer, Hash)>] UpdateCategoryById200Response data, response status code and response headers
    def update_category_by_id_with_http_info(ext_id, if_match, prism_v40_config_category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.update_category_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling CategoriesApi.update_category_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling CategoriesApi.update_category_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling CategoriesApi.update_category_by_id"
      end
      # verify the required parameter 'prism_v40_config_category' is set
      if @api_client.config.client_side_validation && prism_v40_config_category.nil?
        fail ArgumentError, "Missing the required parameter 'prism_v40_config_category' when calling CategoriesApi.update_category_by_id"
      end
      # resource path
      local_var_path = '/prism/v4.0/config/categories/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prism_v40_config_category)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCategoryById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"CategoriesApi.update_category_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#update_category_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
