=begin
#Nutanix Prism APIs

#Manage Tasks, Category Associations and Submit Batch Operations.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module NutanixPrism
  # This configuration is used to provide the resource-related details like container external identifiers, number of VCPUs, memory size, data disk size of the domain manager (Prism Central). In the case of a multi-node setup, the sum of resources like number of VCPUs, memory size and data disk size are provided.
  class PrismV40ConfigDomainManagerResourceConfig
    # This property is used for readOnly purposes to display Prism Central number of VCPUs allocation.
    attr_accessor :num_vcpus

    # This property is used for readOnly purposes to display Prism Central RAM allocation at the cluster level.
    attr_accessor :memory_size_bytes

    # This property is used for readOnly purposes to display Prism Central data disk size allocation at a cluster level.
    attr_accessor :data_disk_size_bytes

    # The external identifier of the container that will be used to create the domain manager (Prism Central) cluster.
    attr_accessor :container_ext_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_vcpus' => :'numVcpus',
        :'memory_size_bytes' => :'memorySizeBytes',
        :'data_disk_size_bytes' => :'dataDiskSizeBytes',
        :'container_ext_ids' => :'containerExtIds'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'num_vcpus' => :'Integer',
        :'memory_size_bytes' => :'Integer',
        :'data_disk_size_bytes' => :'Integer',
        :'container_ext_ids' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixPrism::PrismV40ConfigDomainManagerResourceConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixPrism::PrismV40ConfigDomainManagerResourceConfig`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'num_vcpus')
        self.num_vcpus = attributes[:'num_vcpus']
      end

      if attributes.key?(:'memory_size_bytes')
        self.memory_size_bytes = attributes[:'memory_size_bytes']
      end

      if attributes.key?(:'data_disk_size_bytes')
        self.data_disk_size_bytes = attributes[:'data_disk_size_bytes']
      end

      if attributes.key?(:'container_ext_ids')
        if (value = attributes[:'container_ext_ids']).is_a?(Array)
          self.container_ext_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@container_ext_ids.nil? && @container_ext_ids.length > 3
        invalid_properties.push('invalid value for "container_ext_ids", number of items must be less than or equal to 3.')
      end

      if !@container_ext_ids.nil? && @container_ext_ids.length < 1
        invalid_properties.push('invalid value for "container_ext_ids", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@container_ext_ids.nil? && @container_ext_ids.length > 3
      return false if !@container_ext_ids.nil? && @container_ext_ids.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] container_ext_ids Value to be assigned
    def container_ext_ids=(container_ext_ids)
      if container_ext_ids.nil?
        fail ArgumentError, 'container_ext_ids cannot be nil'
      end

      if container_ext_ids.length > 3
        fail ArgumentError, 'invalid value for "container_ext_ids", number of items must be less than or equal to 3.'
      end

      if container_ext_ids.length < 1
        fail ArgumentError, 'invalid value for "container_ext_ids", number of items must be greater than or equal to 1.'
      end

      @container_ext_ids = container_ext_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_vcpus == o.num_vcpus &&
          memory_size_bytes == o.memory_size_bytes &&
          data_disk_size_bytes == o.data_disk_size_bytes &&
          container_ext_ids == o.container_ext_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [num_vcpus, memory_size_bytes, data_disk_size_bytes, container_ext_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixPrism.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
