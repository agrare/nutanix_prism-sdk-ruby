=begin
#Nutanix Prism APIs

#Manage Tasks, Category Associations and Submit Batch Operations.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module NutanixPrism
  class PrismV40ConfigCategory
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # The key of a category when it is represented in `key:value` format.  Constraints applicable when field is given in the payload during create and update: * A string of maxlength of 64 * Character at the start cannot be `$` * Character `/` is not allowed anywhere  It is a mandatory field in the payload of `createCategory` and `updateCategoryById` APIs.<br> This field can't be updated through `updateCategoryById` API. 
    attr_accessor :key

    # The value of a category when it is represented in `key:value` format.  Constraints applicable when the field is given in the payload during create and update: * A string of max length 64 * Character at the start cannot be `$` * Character `/` is not allowed anywhere  It is a mandatory input field in the payload of `createCategory` and `updateCategoryById` APIs.<br> This field can be updated through `updateCategoryById` API.<br> Updating the value will not change the extId of the category. 
    attr_accessor :value

    attr_accessor :type

    # A string consisting of the description of the category as defined by the user.<br> Description can be optionally provided in the payload of `createCategory` and `updateCategoryById` APIs.<br> Description field can be updated through `updateCategoryById` API.<br> The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 
    attr_accessor :description

    # This field contains the UUID of a user who owns the category.<br> This field will be ignored if given in the payload of `createCategory` API. Hence, when a category is created, the logged-in user automatically becomes the owner of the category.<br> This field can be updated through `updateCategoryById` API, in which case, should be provided, UUID of a valid user is present in the system.<br> Validity of the user UUID can be checked by invoking the API: authn/users/{extId} in the 'Identity and Access Management' or 'IAM' namespace.<br> It is used for enabling RBAC access to self-owned categories. 
    attr_accessor :owner_uuid

    # This field gives basic information about resources that are associated with the category.<br> The results present under this field summarize the counts of various kinds of resources associated with the category.<br> For more detailed information about the UUIDs of the resources, please look into the field `detailedAssociations`.<br> This field will be ignored, if given in the payload of `updateCategoryById` or `createCategory` APIs.<br> This field will not be present by default in `listCategories` API, unless the parameter $expand=associations is present in the URL. 
    attr_accessor :associations

    # This field gives detailed information about the resources which are associated with the category.<br> The results present under this field contain the UUIDs of the entities and policies of various kinds associated with the category.<br> This field will be ignored, if given in the payload of `updateCategoryById` or `createCategory` APIs.<br> This field will not be present by default in `listCategories` or `getCategoryById` APIs, unless the parameter $expand=detailedAssociations is present in the URL. 
    attr_accessor :detailed_associations

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'key' => :'key',
        :'value' => :'value',
        :'type' => :'type',
        :'description' => :'description',
        :'owner_uuid' => :'ownerUuid',
        :'associations' => :'associations',
        :'detailed_associations' => :'detailedAssociations'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'key' => :'String',
        :'value' => :'String',
        :'type' => :'PrismV40ConfigCategoryType',
        :'description' => :'String',
        :'owner_uuid' => :'String',
        :'associations' => :'Array<PrismV40ConfigAssociationSummary>',
        :'detailed_associations' => :'Array<PrismV40ConfigAssociationDetail>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixPrism::PrismV40ConfigCategory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixPrism::PrismV40ConfigCategory`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      else
        self.key = nil
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      else
        self.value = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'owner_uuid')
        self.owner_uuid = attributes[:'owner_uuid']
      end

      if attributes.key?(:'associations')
        if (value = attributes[:'associations']).is_a?(Array)
          self.associations = value
        end
      end

      if attributes.key?(:'detailed_associations')
        if (value = attributes[:'detailed_associations']).is_a?(Array)
          self.detailed_associations = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if @key.nil?
        invalid_properties.push('invalid value for "key", key cannot be nil.')
      end

      if @key.to_s.length > 64
        invalid_properties.push('invalid value for "key", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^$\/][^\/]{0,63}$/)
      if @key !~ pattern
        invalid_properties.push("invalid value for \"key\", must conform to the pattern #{pattern}.")
      end

      if @value.nil?
        invalid_properties.push('invalid value for "value", value cannot be nil.')
      end

      if @value.to_s.length > 64
        invalid_properties.push('invalid value for "value", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^$\/][^\/]{0,63}$/)
      if @value !~ pattern
        invalid_properties.push("invalid value for \"value\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^.{0,512}$/)
      if !@description.nil? && @description !~ pattern
        invalid_properties.push("invalid value for \"description\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@owner_uuid.nil? && @owner_uuid !~ pattern
        invalid_properties.push("invalid value for \"owner_uuid\", must conform to the pattern #{pattern}.")
      end

      if !@associations.nil? && @associations.length > 100
        invalid_properties.push('invalid value for "associations", number of items must be less than or equal to 100.')
      end

      if !@associations.nil? && @associations.length < 0
        invalid_properties.push('invalid value for "associations", number of items must be greater than or equal to 0.')
      end

      if !@detailed_associations.nil? && @detailed_associations.length > 100
        invalid_properties.push('invalid value for "detailed_associations", number of items must be less than or equal to 100.')
      end

      if !@detailed_associations.nil? && @detailed_associations.length < 0
        invalid_properties.push('invalid value for "detailed_associations", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if @key.nil?
      return false if @key.to_s.length > 64
      return false if @key !~ Regexp.new(/^[^$\/][^\/]{0,63}$/)
      return false if @value.nil?
      return false if @value.to_s.length > 64
      return false if @value !~ Regexp.new(/^[^$\/][^\/]{0,63}$/)
      return false if !@description.nil? && @description !~ Regexp.new(/^.{0,512}$/)
      return false if !@owner_uuid.nil? && @owner_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@associations.nil? && @associations.length > 100
      return false if !@associations.nil? && @associations.length < 0
      return false if !@detailed_associations.nil? && @detailed_associations.length > 100
      return false if !@detailed_associations.nil? && @detailed_associations.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] key Value to be assigned
    def key=(key)
      if key.nil?
        fail ArgumentError, 'key cannot be nil'
      end

      if key.to_s.length > 64
        fail ArgumentError, 'invalid value for "key", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^$\/][^\/]{0,63}$/)
      if key !~ pattern
        fail ArgumentError, "invalid value for \"key\", must conform to the pattern #{pattern}."
      end

      @key = key
    end

    # Custom attribute writer method with validation
    # @param [Object] value Value to be assigned
    def value=(value)
      if value.nil?
        fail ArgumentError, 'value cannot be nil'
      end

      if value.to_s.length > 64
        fail ArgumentError, 'invalid value for "value", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^$\/][^\/]{0,63}$/)
      if value !~ pattern
        fail ArgumentError, "invalid value for \"value\", must conform to the pattern #{pattern}."
      end

      @value = value
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      pattern = Regexp.new(/^.{0,512}$/)
      if description !~ pattern
        fail ArgumentError, "invalid value for \"description\", must conform to the pattern #{pattern}."
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] owner_uuid Value to be assigned
    def owner_uuid=(owner_uuid)
      if owner_uuid.nil?
        fail ArgumentError, 'owner_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if owner_uuid !~ pattern
        fail ArgumentError, "invalid value for \"owner_uuid\", must conform to the pattern #{pattern}."
      end

      @owner_uuid = owner_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] associations Value to be assigned
    def associations=(associations)
      if associations.nil?
        fail ArgumentError, 'associations cannot be nil'
      end

      if associations.length > 100
        fail ArgumentError, 'invalid value for "associations", number of items must be less than or equal to 100.'
      end

      if associations.length < 0
        fail ArgumentError, 'invalid value for "associations", number of items must be greater than or equal to 0.'
      end

      @associations = associations
    end

    # Custom attribute writer method with validation
    # @param [Object] detailed_associations Value to be assigned
    def detailed_associations=(detailed_associations)
      if detailed_associations.nil?
        fail ArgumentError, 'detailed_associations cannot be nil'
      end

      if detailed_associations.length > 100
        fail ArgumentError, 'invalid value for "detailed_associations", number of items must be less than or equal to 100.'
      end

      if detailed_associations.length < 0
        fail ArgumentError, 'invalid value for "detailed_associations", number of items must be greater than or equal to 0.'
      end

      @detailed_associations = detailed_associations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          key == o.key &&
          value == o.value &&
          type == o.type &&
          description == o.description &&
          owner_uuid == o.owner_uuid &&
          associations == o.associations &&
          detailed_associations == o.detailed_associations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, key, value, type, description, owner_uuid, associations, detailed_associations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixPrism.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
