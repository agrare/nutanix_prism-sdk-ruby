=begin
#Nutanix Prism APIs

#Manage Tasks, Category Associations and Submit Batch Operations.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module NutanixPrism
  # The task object tracking an asynchronous operation.
  class PrismV40ConfigTask
    # A globally unique identifier of a task.
    attr_accessor :ext_id

    # The operation name being tracked by the task.
    attr_accessor :operation

    # Description of the operation being tracked by the task.
    attr_accessor :operation_description

    attr_accessor :parent_task

    # UTC date and time in RFC-3339 format when the task was created.
    attr_accessor :created_time

    # UTC date and time in RFC-3339 format when the task was started.
    attr_accessor :started_time

    # UTC date and time in RFC-3339 format when the task was completed.
    attr_accessor :completed_time

    attr_accessor :status

    # Task progress expressed as a percentage.
    attr_accessor :progress_percentage

    # Reference to entities associated with the task.
    attr_accessor :entities_affected

    # Reference to tasks spawned as children of the current task. The task get response would contain a limited number of subtask references. To get the entire list of subtasks for a task, use the parent task filter in the task list API.
    attr_accessor :sub_tasks

    # List of steps completed as part of the task.
    attr_accessor :sub_steps

    # Signifies if the task can be cancelled.
    attr_accessor :is_cancelable

    attr_accessor :owned_by

    # Additional details on the task to aid the user with further actions post completion of the task.
    attr_accessor :completion_details

    # Error details explaining a task failure. These would be populated only in the case of task failures.
    attr_accessor :error_messages

    # Provides an error message in the absence of a well-defined error message for the tasks created through legacy APIs.
    attr_accessor :legacy_error_message

    # Warning messages to alert the user of issues which did not directly cause task failure. These can be populated for any task.
    attr_accessor :warnings

    # UTC date and time in RFC-3339 format when the task was last updated.
    attr_accessor :last_updated_time

    # List of globally unique identifiers for clusters associated with the task or any of its subtasks.
    attr_accessor :cluster_ext_ids

    attr_accessor :root_task

    # Signifies if the task is a background task or not.
    attr_accessor :is_background_task

    # Number of tasks spawned as children of the current task.
    attr_accessor :number_of_subtasks

    # Number of entities associated with the task.
    attr_accessor :number_of_entities_affected

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ext_id' => :'extId',
        :'operation' => :'operation',
        :'operation_description' => :'operationDescription',
        :'parent_task' => :'parentTask',
        :'created_time' => :'createdTime',
        :'started_time' => :'startedTime',
        :'completed_time' => :'completedTime',
        :'status' => :'status',
        :'progress_percentage' => :'progressPercentage',
        :'entities_affected' => :'entitiesAffected',
        :'sub_tasks' => :'subTasks',
        :'sub_steps' => :'subSteps',
        :'is_cancelable' => :'isCancelable',
        :'owned_by' => :'ownedBy',
        :'completion_details' => :'completionDetails',
        :'error_messages' => :'errorMessages',
        :'legacy_error_message' => :'legacyErrorMessage',
        :'warnings' => :'warnings',
        :'last_updated_time' => :'lastUpdatedTime',
        :'cluster_ext_ids' => :'clusterExtIds',
        :'root_task' => :'rootTask',
        :'is_background_task' => :'isBackgroundTask',
        :'number_of_subtasks' => :'numberOfSubtasks',
        :'number_of_entities_affected' => :'numberOfEntitiesAffected'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ext_id' => :'String',
        :'operation' => :'String',
        :'operation_description' => :'String',
        :'parent_task' => :'PrismV40ConfigTaskReferenceInternal',
        :'created_time' => :'Time',
        :'started_time' => :'Time',
        :'completed_time' => :'Time',
        :'status' => :'PrismV40ConfigTaskStatus',
        :'progress_percentage' => :'Integer',
        :'entities_affected' => :'Array<PrismV40ConfigEntityReference>',
        :'sub_tasks' => :'Array<PrismV40ConfigTaskReferenceInternal>',
        :'sub_steps' => :'Array<PrismV40ConfigTaskStep>',
        :'is_cancelable' => :'Boolean',
        :'owned_by' => :'PrismV40ConfigOwnerReference',
        :'completion_details' => :'Array<CommonV10ConfigKVPair>',
        :'error_messages' => :'Array<PrismV40ErrorAppMessage>',
        :'legacy_error_message' => :'String',
        :'warnings' => :'Array<PrismV40ErrorAppMessage>',
        :'last_updated_time' => :'Time',
        :'cluster_ext_ids' => :'Array<String>',
        :'root_task' => :'PrismV40ConfigTaskReferenceInternal',
        :'is_background_task' => :'Boolean',
        :'number_of_subtasks' => :'Integer',
        :'number_of_entities_affected' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixPrism::PrismV40ConfigTask` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixPrism::PrismV40ConfigTask`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'operation')
        self.operation = attributes[:'operation']
      end

      if attributes.key?(:'operation_description')
        self.operation_description = attributes[:'operation_description']
      end

      if attributes.key?(:'parent_task')
        self.parent_task = attributes[:'parent_task']
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'started_time')
        self.started_time = attributes[:'started_time']
      end

      if attributes.key?(:'completed_time')
        self.completed_time = attributes[:'completed_time']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'progress_percentage')
        self.progress_percentage = attributes[:'progress_percentage']
      end

      if attributes.key?(:'entities_affected')
        if (value = attributes[:'entities_affected']).is_a?(Array)
          self.entities_affected = value
        end
      end

      if attributes.key?(:'sub_tasks')
        if (value = attributes[:'sub_tasks']).is_a?(Array)
          self.sub_tasks = value
        end
      end

      if attributes.key?(:'sub_steps')
        if (value = attributes[:'sub_steps']).is_a?(Array)
          self.sub_steps = value
        end
      end

      if attributes.key?(:'is_cancelable')
        self.is_cancelable = attributes[:'is_cancelable']
      end

      if attributes.key?(:'owned_by')
        self.owned_by = attributes[:'owned_by']
      end

      if attributes.key?(:'completion_details')
        if (value = attributes[:'completion_details']).is_a?(Array)
          self.completion_details = value
        end
      end

      if attributes.key?(:'error_messages')
        if (value = attributes[:'error_messages']).is_a?(Array)
          self.error_messages = value
        end
      end

      if attributes.key?(:'legacy_error_message')
        self.legacy_error_message = attributes[:'legacy_error_message']
      end

      if attributes.key?(:'warnings')
        if (value = attributes[:'warnings']).is_a?(Array)
          self.warnings = value
        end
      end

      if attributes.key?(:'last_updated_time')
        self.last_updated_time = attributes[:'last_updated_time']
      end

      if attributes.key?(:'cluster_ext_ids')
        if (value = attributes[:'cluster_ext_ids']).is_a?(Array)
          self.cluster_ext_ids = value
        end
      end

      if attributes.key?(:'root_task')
        self.root_task = attributes[:'root_task']
      end

      if attributes.key?(:'is_background_task')
        self.is_background_task = attributes[:'is_background_task']
      end

      if attributes.key?(:'number_of_subtasks')
        self.number_of_subtasks = attributes[:'number_of_subtasks']
      end

      if attributes.key?(:'number_of_entities_affected')
        self.number_of_entities_affected = attributes[:'number_of_entities_affected']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-zA-Z0-9\/+]*={0,2}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@progress_percentage.nil? && @progress_percentage > 100
        invalid_properties.push('invalid value for "progress_percentage", must be smaller than or equal to 100.')
      end

      if !@progress_percentage.nil? && @progress_percentage < 0
        invalid_properties.push('invalid value for "progress_percentage", must be greater than or equal to 0.')
      end

      if !@entities_affected.nil? && @entities_affected.length > 300
        invalid_properties.push('invalid value for "entities_affected", number of items must be less than or equal to 300.')
      end

      if !@entities_affected.nil? && @entities_affected.length < 0
        invalid_properties.push('invalid value for "entities_affected", number of items must be greater than or equal to 0.')
      end

      if !@sub_tasks.nil? && @sub_tasks.length > 100
        invalid_properties.push('invalid value for "sub_tasks", number of items must be less than or equal to 100.')
      end

      if !@sub_tasks.nil? && @sub_tasks.length < 0
        invalid_properties.push('invalid value for "sub_tasks", number of items must be greater than or equal to 0.')
      end

      if !@sub_steps.nil? && @sub_steps.length > 50
        invalid_properties.push('invalid value for "sub_steps", number of items must be less than or equal to 50.')
      end

      if !@sub_steps.nil? && @sub_steps.length < 0
        invalid_properties.push('invalid value for "sub_steps", number of items must be greater than or equal to 0.')
      end

      if !@completion_details.nil? && @completion_details.length > 50
        invalid_properties.push('invalid value for "completion_details", number of items must be less than or equal to 50.')
      end

      if !@completion_details.nil? && @completion_details.length < 0
        invalid_properties.push('invalid value for "completion_details", number of items must be greater than or equal to 0.')
      end

      if !@error_messages.nil? && @error_messages.length > 100
        invalid_properties.push('invalid value for "error_messages", number of items must be less than or equal to 100.')
      end

      if !@error_messages.nil? && @error_messages.length < 0
        invalid_properties.push('invalid value for "error_messages", number of items must be greater than or equal to 0.')
      end

      if !@warnings.nil? && @warnings.length > 50
        invalid_properties.push('invalid value for "warnings", number of items must be less than or equal to 50.')
      end

      if !@warnings.nil? && @warnings.length < 0
        invalid_properties.push('invalid value for "warnings", number of items must be greater than or equal to 0.')
      end

      if !@cluster_ext_ids.nil? && @cluster_ext_ids.length > 500
        invalid_properties.push('invalid value for "cluster_ext_ids", number of items must be less than or equal to 500.')
      end

      if !@cluster_ext_ids.nil? && @cluster_ext_ids.length < 0
        invalid_properties.push('invalid value for "cluster_ext_ids", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-zA-Z0-9\/+]*={0,2}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/)
      return false if !@progress_percentage.nil? && @progress_percentage > 100
      return false if !@progress_percentage.nil? && @progress_percentage < 0
      return false if !@entities_affected.nil? && @entities_affected.length > 300
      return false if !@entities_affected.nil? && @entities_affected.length < 0
      return false if !@sub_tasks.nil? && @sub_tasks.length > 100
      return false if !@sub_tasks.nil? && @sub_tasks.length < 0
      return false if !@sub_steps.nil? && @sub_steps.length > 50
      return false if !@sub_steps.nil? && @sub_steps.length < 0
      return false if !@completion_details.nil? && @completion_details.length > 50
      return false if !@completion_details.nil? && @completion_details.length < 0
      return false if !@error_messages.nil? && @error_messages.length > 100
      return false if !@error_messages.nil? && @error_messages.length < 0
      return false if !@warnings.nil? && @warnings.length > 50
      return false if !@warnings.nil? && @warnings.length < 0
      return false if !@cluster_ext_ids.nil? && @cluster_ext_ids.length > 500
      return false if !@cluster_ext_ids.nil? && @cluster_ext_ids.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      if ext_id.nil?
        fail ArgumentError, 'ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9\/+]*={0,2}:[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/)
      if ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] progress_percentage Value to be assigned
    def progress_percentage=(progress_percentage)
      if progress_percentage.nil?
        fail ArgumentError, 'progress_percentage cannot be nil'
      end

      if progress_percentage > 100
        fail ArgumentError, 'invalid value for "progress_percentage", must be smaller than or equal to 100.'
      end

      if progress_percentage < 0
        fail ArgumentError, 'invalid value for "progress_percentage", must be greater than or equal to 0.'
      end

      @progress_percentage = progress_percentage
    end

    # Custom attribute writer method with validation
    # @param [Object] entities_affected Value to be assigned
    def entities_affected=(entities_affected)
      if entities_affected.nil?
        fail ArgumentError, 'entities_affected cannot be nil'
      end

      if entities_affected.length > 300
        fail ArgumentError, 'invalid value for "entities_affected", number of items must be less than or equal to 300.'
      end

      if entities_affected.length < 0
        fail ArgumentError, 'invalid value for "entities_affected", number of items must be greater than or equal to 0.'
      end

      @entities_affected = entities_affected
    end

    # Custom attribute writer method with validation
    # @param [Object] sub_tasks Value to be assigned
    def sub_tasks=(sub_tasks)
      if sub_tasks.nil?
        fail ArgumentError, 'sub_tasks cannot be nil'
      end

      if sub_tasks.length > 100
        fail ArgumentError, 'invalid value for "sub_tasks", number of items must be less than or equal to 100.'
      end

      if sub_tasks.length < 0
        fail ArgumentError, 'invalid value for "sub_tasks", number of items must be greater than or equal to 0.'
      end

      @sub_tasks = sub_tasks
    end

    # Custom attribute writer method with validation
    # @param [Object] sub_steps Value to be assigned
    def sub_steps=(sub_steps)
      if sub_steps.nil?
        fail ArgumentError, 'sub_steps cannot be nil'
      end

      if sub_steps.length > 50
        fail ArgumentError, 'invalid value for "sub_steps", number of items must be less than or equal to 50.'
      end

      if sub_steps.length < 0
        fail ArgumentError, 'invalid value for "sub_steps", number of items must be greater than or equal to 0.'
      end

      @sub_steps = sub_steps
    end

    # Custom attribute writer method with validation
    # @param [Object] completion_details Value to be assigned
    def completion_details=(completion_details)
      if completion_details.nil?
        fail ArgumentError, 'completion_details cannot be nil'
      end

      if completion_details.length > 50
        fail ArgumentError, 'invalid value for "completion_details", number of items must be less than or equal to 50.'
      end

      if completion_details.length < 0
        fail ArgumentError, 'invalid value for "completion_details", number of items must be greater than or equal to 0.'
      end

      @completion_details = completion_details
    end

    # Custom attribute writer method with validation
    # @param [Object] error_messages Value to be assigned
    def error_messages=(error_messages)
      if error_messages.nil?
        fail ArgumentError, 'error_messages cannot be nil'
      end

      if error_messages.length > 100
        fail ArgumentError, 'invalid value for "error_messages", number of items must be less than or equal to 100.'
      end

      if error_messages.length < 0
        fail ArgumentError, 'invalid value for "error_messages", number of items must be greater than or equal to 0.'
      end

      @error_messages = error_messages
    end

    # Custom attribute writer method with validation
    # @param [Object] warnings Value to be assigned
    def warnings=(warnings)
      if warnings.nil?
        fail ArgumentError, 'warnings cannot be nil'
      end

      if warnings.length > 50
        fail ArgumentError, 'invalid value for "warnings", number of items must be less than or equal to 50.'
      end

      if warnings.length < 0
        fail ArgumentError, 'invalid value for "warnings", number of items must be greater than or equal to 0.'
      end

      @warnings = warnings
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_ext_ids Value to be assigned
    def cluster_ext_ids=(cluster_ext_ids)
      if cluster_ext_ids.nil?
        fail ArgumentError, 'cluster_ext_ids cannot be nil'
      end

      if cluster_ext_ids.length > 500
        fail ArgumentError, 'invalid value for "cluster_ext_ids", number of items must be less than or equal to 500.'
      end

      if cluster_ext_ids.length < 0
        fail ArgumentError, 'invalid value for "cluster_ext_ids", number of items must be greater than or equal to 0.'
      end

      @cluster_ext_ids = cluster_ext_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ext_id == o.ext_id &&
          operation == o.operation &&
          operation_description == o.operation_description &&
          parent_task == o.parent_task &&
          created_time == o.created_time &&
          started_time == o.started_time &&
          completed_time == o.completed_time &&
          status == o.status &&
          progress_percentage == o.progress_percentage &&
          entities_affected == o.entities_affected &&
          sub_tasks == o.sub_tasks &&
          sub_steps == o.sub_steps &&
          is_cancelable == o.is_cancelable &&
          owned_by == o.owned_by &&
          completion_details == o.completion_details &&
          error_messages == o.error_messages &&
          legacy_error_message == o.legacy_error_message &&
          warnings == o.warnings &&
          last_updated_time == o.last_updated_time &&
          cluster_ext_ids == o.cluster_ext_ids &&
          root_task == o.root_task &&
          is_background_task == o.is_background_task &&
          number_of_subtasks == o.number_of_subtasks &&
          number_of_entities_affected == o.number_of_entities_affected
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ext_id, operation, operation_description, parent_task, created_time, started_time, completed_time, status, progress_percentage, entities_affected, sub_tasks, sub_steps, is_cancelable, owned_by, completion_details, error_messages, legacy_error_message, warnings, last_updated_time, cluster_ext_ids, root_task, is_background_task, number_of_subtasks, number_of_entities_affected].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixPrism.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
