=begin
#Nutanix Prism APIs

#Manage Tasks, Category Associations and Submit Batch Operations.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module NutanixPrism
  # Denotes the type of a category.<br> There are three types of categories: SYSTEM, INTERNAL, and USER.<br> This field is immutable. 
  class PrismV40ConfigCategoryOld
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # The fully qualified name of this category. It is unique for each category.<br> It is a read-only field. The service constructs it from the name-parentExtId combination. An example of a fqName would be `Location/Bangalore`, where `Location` is the parent category's name and `Bangalore` is the category name.<br> This field is immutable.<br> 
    attr_accessor :fq_name

    # The short name of this category. It may not be unique for each category.<br> It is a mandatory field that must be specified inside the post/put request  body.<br> This field is immutable. 
    attr_accessor :name

    # The parent category of this category (may be null if this category is not part of a hierarchy).<br> Each category can have at most one parent.<br> A parent cannot be deleted until all the children categories are deleted first.<br> Must be specified inside the post/put request body for child categories (if not specified, the service assumes the category to be a parent category).<br> This field is immutable. 
    attr_accessor :parent_ext_id

    # The user-specified name is a string that the user can specify; with syntax and semantics controlled by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. Unlike the name of the categories, which are immutable, the user name can be changed by the user to meet their needs. 
    attr_accessor :user_specified_name

    attr_accessor :type

    # A string consisting of the description of the category as defined by the user.  The server does not validate this value nor does it enforce the uniqueness or any other constraints.<br> It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 
    attr_accessor :description

    attr_accessor :associations

    # This attribute contains the list of all the categories for which this category is the parent.<br> The parentExtId attributes of each child category is set as the extId of this category.<br> Note that this list only contains the Summary view of each child category. 
    attr_accessor :child_categories

    # It is a read-only field inserted into category entity at the time of category creation, and which contains the UUID of the user who created this category. It is used for enabling authorization of a particular kind where the user has no access to view/create/update/delete any categories other than the category created by oneself.
    attr_accessor :owner_uuid

    # Opaque metadata which can be associated to a category.<br> It is a list of key-value pairs.<br> For example, for a category 'California/SanJose' we can associate a geographical coordinate based metadata like: {'latitude': '37.3382° N', 'longitude': '121.8863° W'}.  The server does not validate this value nor does it enforce the uniqueness or any other constraints. It is the responsibility of the user to ensure that any semantic or syntactic constraints are retained when mutating this field. 
    attr_accessor :metadata

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'fq_name' => :'fqName',
        :'name' => :'name',
        :'parent_ext_id' => :'parentExtId',
        :'user_specified_name' => :'userSpecifiedName',
        :'type' => :'type',
        :'description' => :'description',
        :'associations' => :'associations',
        :'child_categories' => :'childCategories',
        :'owner_uuid' => :'ownerUuid',
        :'metadata' => :'metadata'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'fq_name' => :'String',
        :'name' => :'String',
        :'parent_ext_id' => :'String',
        :'user_specified_name' => :'String',
        :'type' => :'PrismV40ConfigCategoryType',
        :'description' => :'String',
        :'associations' => :'Array<PrismV40ConfigCategoryAssociationSummaryOld>',
        :'child_categories' => :'Array<PrismV40ConfigCategorySummaryOld>',
        :'owner_uuid' => :'String',
        :'metadata' => :'Array<CommonV10ConfigKVPair>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'PrismV40ConfigCategorySummaryOld'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixPrism::PrismV40ConfigCategoryOld` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixPrism::PrismV40ConfigCategoryOld`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'fq_name')
        self.fq_name = attributes[:'fq_name']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'parent_ext_id')
        self.parent_ext_id = attributes[:'parent_ext_id']
      end

      if attributes.key?(:'user_specified_name')
        self.user_specified_name = attributes[:'user_specified_name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'associations')
        if (value = attributes[:'associations']).is_a?(Array)
          self.associations = value
        end
      end

      if attributes.key?(:'child_categories')
        if (value = attributes[:'child_categories']).is_a?(Array)
          self.child_categories = value
        end
      end

      if attributes.key?(:'owner_uuid')
        self.owner_uuid = attributes[:'owner_uuid']
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Array)
          self.metadata = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if !@fq_name.nil? && @fq_name.to_s.length > 64
        invalid_properties.push('invalid value for "fq_name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^(?=.{1,260}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$/)
      if !@fq_name.nil? && @fq_name !~ pattern
        invalid_properties.push("invalid value for \"fq_name\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/)
      if @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@parent_ext_id.nil? && @parent_ext_id !~ pattern
        invalid_properties.push("invalid value for \"parent_ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@user_specified_name.nil? && @user_specified_name.to_s.length > 64
        invalid_properties.push('invalid value for "user_specified_name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/)
      if !@user_specified_name.nil? && @user_specified_name !~ pattern
        invalid_properties.push("invalid value for \"user_specified_name\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.length > 64
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^.{0,512}$/)
      if !@description.nil? && @description !~ pattern
        invalid_properties.push("invalid value for \"description\", must conform to the pattern #{pattern}.")
      end

      if !@associations.nil? && @associations.length > 500
        invalid_properties.push('invalid value for "associations", number of items must be less than or equal to 500.')
      end

      if !@associations.nil? && @associations.length < 0
        invalid_properties.push('invalid value for "associations", number of items must be greater than or equal to 0.')
      end

      if !@child_categories.nil? && @child_categories.length > 50
        invalid_properties.push('invalid value for "child_categories", number of items must be less than or equal to 50.')
      end

      if !@child_categories.nil? && @child_categories.length < 0
        invalid_properties.push('invalid value for "child_categories", number of items must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@owner_uuid.nil? && @owner_uuid !~ pattern
        invalid_properties.push("invalid value for \"owner_uuid\", must conform to the pattern #{pattern}.")
      end

      if !@metadata.nil? && @metadata.length > 100
        invalid_properties.push('invalid value for "metadata", number of items must be less than or equal to 100.')
      end

      if !@metadata.nil? && @metadata.length < 0
        invalid_properties.push('invalid value for "metadata", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if !@fq_name.nil? && @fq_name.to_s.length > 64
      return false if !@fq_name.nil? && @fq_name !~ Regexp.new(/^(?=.{1,260}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$/)
      return false if @name.nil?
      return false if @name.to_s.length > 64
      return false if @name !~ Regexp.new(/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/)
      return false if !@parent_ext_id.nil? && @parent_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@user_specified_name.nil? && @user_specified_name.to_s.length > 64
      return false if !@user_specified_name.nil? && @user_specified_name !~ Regexp.new(/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/)
      return false if !@description.nil? && @description.to_s.length > 64
      return false if !@description.nil? && @description !~ Regexp.new(/^.{0,512}$/)
      return false if !@associations.nil? && @associations.length > 500
      return false if !@associations.nil? && @associations.length < 0
      return false if !@child_categories.nil? && @child_categories.length > 50
      return false if !@child_categories.nil? && @child_categories.length < 0
      return false if !@owner_uuid.nil? && @owner_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@metadata.nil? && @metadata.length > 100
      return false if !@metadata.nil? && @metadata.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] fq_name Value to be assigned
    def fq_name=(fq_name)
      if fq_name.nil?
        fail ArgumentError, 'fq_name cannot be nil'
      end

      if fq_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "fq_name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^(?=.{1,260}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*(\/([a-zA-Z]+([a-zA-Z0-9_.-]+)*))*$/)
      if fq_name !~ pattern
        fail ArgumentError, "invalid value for \"fq_name\", must conform to the pattern #{pattern}."
      end

      @fq_name = fq_name
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/)
      if name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_ext_id Value to be assigned
    def parent_ext_id=(parent_ext_id)
      if parent_ext_id.nil?
        fail ArgumentError, 'parent_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if parent_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"parent_ext_id\", must conform to the pattern #{pattern}."
      end

      @parent_ext_id = parent_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] user_specified_name Value to be assigned
    def user_specified_name=(user_specified_name)
      if user_specified_name.nil?
        fail ArgumentError, 'user_specified_name cannot be nil'
      end

      if user_specified_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "user_specified_name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^(?=.{1,64}$)[a-zA-Z]+([a-zA-Z0-9_.-]+)*$/)
      if user_specified_name !~ pattern
        fail ArgumentError, "invalid value for \"user_specified_name\", must conform to the pattern #{pattern}."
      end

      @user_specified_name = user_specified_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 64
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^.{0,512}$/)
      if description !~ pattern
        fail ArgumentError, "invalid value for \"description\", must conform to the pattern #{pattern}."
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] associations Value to be assigned
    def associations=(associations)
      if associations.nil?
        fail ArgumentError, 'associations cannot be nil'
      end

      if associations.length > 500
        fail ArgumentError, 'invalid value for "associations", number of items must be less than or equal to 500.'
      end

      if associations.length < 0
        fail ArgumentError, 'invalid value for "associations", number of items must be greater than or equal to 0.'
      end

      @associations = associations
    end

    # Custom attribute writer method with validation
    # @param [Object] child_categories Value to be assigned
    def child_categories=(child_categories)
      if child_categories.nil?
        fail ArgumentError, 'child_categories cannot be nil'
      end

      if child_categories.length > 50
        fail ArgumentError, 'invalid value for "child_categories", number of items must be less than or equal to 50.'
      end

      if child_categories.length < 0
        fail ArgumentError, 'invalid value for "child_categories", number of items must be greater than or equal to 0.'
      end

      @child_categories = child_categories
    end

    # Custom attribute writer method with validation
    # @param [Object] owner_uuid Value to be assigned
    def owner_uuid=(owner_uuid)
      if owner_uuid.nil?
        fail ArgumentError, 'owner_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if owner_uuid !~ pattern
        fail ArgumentError, "invalid value for \"owner_uuid\", must conform to the pattern #{pattern}."
      end

      @owner_uuid = owner_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] metadata Value to be assigned
    def metadata=(metadata)
      if metadata.nil?
        fail ArgumentError, 'metadata cannot be nil'
      end

      if metadata.length > 100
        fail ArgumentError, 'invalid value for "metadata", number of items must be less than or equal to 100.'
      end

      if metadata.length < 0
        fail ArgumentError, 'invalid value for "metadata", number of items must be greater than or equal to 0.'
      end

      @metadata = metadata
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          fq_name == o.fq_name &&
          name == o.name &&
          parent_ext_id == o.parent_ext_id &&
          user_specified_name == o.user_specified_name &&
          type == o.type &&
          description == o.description &&
          associations == o.associations &&
          child_categories == o.child_categories &&
          owner_uuid == o.owner_uuid &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, fq_name, name, parent_ext_id, user_specified_name, type, description, associations, child_categories, owner_uuid, metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixPrism.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
