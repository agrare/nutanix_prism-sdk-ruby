=begin
#Nutanix Prism APIs

#Manage Tasks, Category Associations and Submit Batch Operations.

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module NutanixPrism
  # Domain manager (Prism Central) network configuration details.
  class PrismV40ConfigDomainManagerNetwork
    attr_accessor :external_address

    # List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    attr_accessor :name_servers

    # List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    attr_accessor :ntp_servers

    # Cluster fully qualified domain name. This is part of payload for cluster update operation only.
    attr_accessor :fqdn

    # This configuration is used to internally manage Prism Central network.
    attr_accessor :internal_networks

    # This configuration is used to manage Prism Central.
    attr_accessor :external_networks

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'external_address' => :'externalAddress',
        :'name_servers' => :'nameServers',
        :'ntp_servers' => :'ntpServers',
        :'fqdn' => :'fqdn',
        :'internal_networks' => :'internalNetworks',
        :'external_networks' => :'externalNetworks'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'external_address' => :'CommonV10ConfigIPAddress',
        :'name_servers' => :'Array<CommonV10ConfigIPAddressOrFQDN>',
        :'ntp_servers' => :'Array<CommonV10ConfigIPAddressOrFQDN>',
        :'fqdn' => :'String',
        :'internal_networks' => :'Array<PrismV40ConfigBaseNetwork>',
        :'external_networks' => :'Array<PrismV40ConfigExternalNetwork>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'ClustermgmtV40ConfigClusterNetwork'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixPrism::PrismV40ConfigDomainManagerNetwork` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixPrism::PrismV40ConfigDomainManagerNetwork`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'external_address')
        self.external_address = attributes[:'external_address']
      end

      if attributes.key?(:'name_servers')
        if (value = attributes[:'name_servers']).is_a?(Array)
          self.name_servers = value
        end
      else
        self.name_servers = nil
      end

      if attributes.key?(:'ntp_servers')
        if (value = attributes[:'ntp_servers']).is_a?(Array)
          self.ntp_servers = value
        end
      else
        self.ntp_servers = nil
      end

      if attributes.key?(:'fqdn')
        self.fqdn = attributes[:'fqdn']
      end

      if attributes.key?(:'internal_networks')
        if (value = attributes[:'internal_networks']).is_a?(Array)
          self.internal_networks = value
        end
      end

      if attributes.key?(:'external_networks')
        if (value = attributes[:'external_networks']).is_a?(Array)
          self.external_networks = value
        end
      else
        self.external_networks = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name_servers.nil?
        invalid_properties.push('invalid value for "name_servers", name_servers cannot be nil.')
      end

      if @name_servers.length > 1024
        invalid_properties.push('invalid value for "name_servers", number of items must be less than or equal to 1024.')
      end

      if @name_servers.length < 0
        invalid_properties.push('invalid value for "name_servers", number of items must be greater than or equal to 0.')
      end

      if @ntp_servers.nil?
        invalid_properties.push('invalid value for "ntp_servers", ntp_servers cannot be nil.')
      end

      if @ntp_servers.length > 1024
        invalid_properties.push('invalid value for "ntp_servers", number of items must be less than or equal to 1024.')
      end

      if @ntp_servers.length < 0
        invalid_properties.push('invalid value for "ntp_servers", number of items must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^([a-z0-9]+(-[a-z0-9]+)*\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$/)
      if !@fqdn.nil? && @fqdn !~ pattern
        invalid_properties.push("invalid value for \"fqdn\", must conform to the pattern #{pattern}.")
      end

      if !@internal_networks.nil? && @internal_networks.length > 1
        invalid_properties.push('invalid value for "internal_networks", number of items must be less than or equal to 1.')
      end

      if !@internal_networks.nil? && @internal_networks.length < 1
        invalid_properties.push('invalid value for "internal_networks", number of items must be greater than or equal to 1.')
      end

      if @external_networks.nil?
        invalid_properties.push('invalid value for "external_networks", external_networks cannot be nil.')
      end

      if @external_networks.length > 1
        invalid_properties.push('invalid value for "external_networks", number of items must be less than or equal to 1.')
      end

      if @external_networks.length < 1
        invalid_properties.push('invalid value for "external_networks", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name_servers.nil?
      return false if @name_servers.length > 1024
      return false if @name_servers.length < 0
      return false if @ntp_servers.nil?
      return false if @ntp_servers.length > 1024
      return false if @ntp_servers.length < 0
      return false if !@fqdn.nil? && @fqdn !~ Regexp.new(/^([a-z0-9]+(-[a-z0-9]+)*\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$/)
      return false if !@internal_networks.nil? && @internal_networks.length > 1
      return false if !@internal_networks.nil? && @internal_networks.length < 1
      return false if @external_networks.nil?
      return false if @external_networks.length > 1
      return false if @external_networks.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name_servers Value to be assigned
    def name_servers=(name_servers)
      if name_servers.nil?
        fail ArgumentError, 'name_servers cannot be nil'
      end

      if name_servers.length > 1024
        fail ArgumentError, 'invalid value for "name_servers", number of items must be less than or equal to 1024.'
      end

      if name_servers.length < 0
        fail ArgumentError, 'invalid value for "name_servers", number of items must be greater than or equal to 0.'
      end

      @name_servers = name_servers
    end

    # Custom attribute writer method with validation
    # @param [Object] ntp_servers Value to be assigned
    def ntp_servers=(ntp_servers)
      if ntp_servers.nil?
        fail ArgumentError, 'ntp_servers cannot be nil'
      end

      if ntp_servers.length > 1024
        fail ArgumentError, 'invalid value for "ntp_servers", number of items must be less than or equal to 1024.'
      end

      if ntp_servers.length < 0
        fail ArgumentError, 'invalid value for "ntp_servers", number of items must be greater than or equal to 0.'
      end

      @ntp_servers = ntp_servers
    end

    # Custom attribute writer method with validation
    # @param [Object] fqdn Value to be assigned
    def fqdn=(fqdn)
      if fqdn.nil?
        fail ArgumentError, 'fqdn cannot be nil'
      end

      pattern = Regexp.new(/^([a-z0-9]+(-[a-z0-9]+)*\.)+([a-z0-9]+(-[a-z0-9]+)*){1,63}$/)
      if fqdn !~ pattern
        fail ArgumentError, "invalid value for \"fqdn\", must conform to the pattern #{pattern}."
      end

      @fqdn = fqdn
    end

    # Custom attribute writer method with validation
    # @param [Object] internal_networks Value to be assigned
    def internal_networks=(internal_networks)
      if internal_networks.nil?
        fail ArgumentError, 'internal_networks cannot be nil'
      end

      if internal_networks.length > 1
        fail ArgumentError, 'invalid value for "internal_networks", number of items must be less than or equal to 1.'
      end

      if internal_networks.length < 1
        fail ArgumentError, 'invalid value for "internal_networks", number of items must be greater than or equal to 1.'
      end

      @internal_networks = internal_networks
    end

    # Custom attribute writer method with validation
    # @param [Object] external_networks Value to be assigned
    def external_networks=(external_networks)
      if external_networks.nil?
        fail ArgumentError, 'external_networks cannot be nil'
      end

      if external_networks.length > 1
        fail ArgumentError, 'invalid value for "external_networks", number of items must be less than or equal to 1.'
      end

      if external_networks.length < 1
        fail ArgumentError, 'invalid value for "external_networks", number of items must be greater than or equal to 1.'
      end

      @external_networks = external_networks
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          external_address == o.external_address &&
          name_servers == o.name_servers &&
          ntp_servers == o.ntp_servers &&
          fqdn == o.fqdn &&
          internal_networks == o.internal_networks &&
          external_networks == o.external_networks
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [external_address, name_servers, ntp_servers, fqdn, internal_networks, external_networks].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixPrism.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
